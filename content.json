{"pages":[{"title":"关于我","text":"DO NOT GO GENTLE INTO THAT GOOD NIGHT&lt;–more–&gt; Do not go gentle into that good night,Old age should burn and rage at close of day;Rage, rage against the dying of the light. Though wise men at their end know dark is right,Because their words had forked no lightning theyDo not go gentle into that good night. 不要温顺地走近那个良夜 不要温顺地走近那个良夜 ，激情不能被消沉的暮色淹没； 咆哮吧 咆哮吧 痛斥那光的退缩 。 智者在临终的时候对黑暗妥协，是因为他们的语言已黯然失色， 他们也不想被夜色迷惑； 咆哮吧咆哮 痛斥那光的退缩。","link":"/about/index.html"}],"posts":[{"title":"主题","text":"安装hexohexo地址 主题教程 这是一篇关于现在这个博客的主题教程。 首先，我现在使用的这个主题是icarus，是一个基于hexo的网页框架的主题。首先，我自己感觉这个主题非常的好看才使用的。再次重申一下，这个主题是基于hexo的，如果你不会使用hexo，你可以去百度或者谷歌，网上现在又很多这个方面的教程。我只是在这里写我在安装这个主题时候遇到的问题。 主题的地址在这里 主题地址 这个主题的作者已经把你可以修改的东西（就是你自己个性化定制的方面）已经弄好了，这个里面就是教程，你可以根据你自己的喜好进行修改。 修改初始页面，建议参考； 修改初始页面地址如果你要自己diy自己的页面的话，你就需要有有关方面的知识。比如说: css html js 上面两个是前端的知识，同时他们也是网页方面的知识。你要是有这方面的需求的话，我很建议你去学习他们，但是这个肯定是不容易的。 现在你应该去到hexo的根目录下，应该是下面的这个样子：编辑器推荐使用：visual studio code .deploy_git（文件夹） node_modules（文件夹） public（渲染页面的文件夹） scaffolds（文件夹） source（资源文件夹） themes（主题文件夹） .gitignore（文本） _config.yml（文本） db.json（文本） package.json（文本） package-lock.json（文本）现在你应该在上面的_config.yml文本中修改以下的代码 代码修改为：theme: icarus 现在你的hexo的主题已经启用为icarus主题了，刷新你的网页你就可以看到我现在的这个网页的页面了。开启阅读更多 在文本中添加代码:&lt;!-- more --&gt; 开启统计数据busuanzi 在主题的_config.yml（文本）中，把busuanzi: false改为busuanzi: true 就讲这两个点，其它的不说。如果有问题，你可以联系我，左上角就是联系方式（邮件）或者在GitHub上给我issue推荐你参考以下的网页来修改自己的主题 参考页面1 参考页面2最后 其实这个主题，作者已经把很多的东西已经集成到了一起。你不一定要是懂得有关的网页知识的。比如上面说的css node.js js你都不一定要了解。当然，这个样子，你就是只能大概的修改，不能够进行更加深入的定制了。","link":"/2019/07/03/主题/"},{"title":"Git教程","text":"git教程git是什么？ 1 这是百度给出的定义。git 2 就我自己的理解来看，git和GitHub结合起来后（国内可以是码云），它不仅仅是一个工作的命令系统（多人结合的系统），它也是一个学习的平台。在上面你可以学习到许多的新的知识，对你想要了解到的。 git的命令 Git Bash Here 1 如果你要使用git命令，你应该在你本地端，即你的文件夹内运行Git Bash Here命令。这个时候会运行一个命令框，是命令行的命令框。你可以对这个目录下的文件进行修改，或者对Github上面的版本库进行操作。git diff 2 运行这个命令后，本地端的文件是没有提交到版本库的。这个命令可以显示运行前后两次不同的内容git add “文件名” 3 提交一个文件到本地版本库Git status 4 查看当前版本库的状态，或者是当前分支的状态。有主分支和不是主分支的区别。git commit -m “文件名称或者称呼” 5 把一个文件从本地的版本库提交到云端的版本库git log 6 查看历史的状态。可以查看全部的状态，也可以以图表的形式显示出来，更加的直观git reset HEAD ___ 7 回退版本库 ___ 里面是你的版本号。git rm 8 删除一个文本，删除操作git remote git remote -v 9 查看远端库的信息master(主分支) dev(开发分支) 10 dev(开发分支)要时刻于远端库保持同步，调试的bug分支不需要时刻保持同步git reflog 11 查看命令历史，可以看到版本号，确定准确的回到那个版本库git reset -hard ___ 12 版本回退cat 13 查看文本的内容git diff HEAD – “文件名” 14 查看工作区与版本库，要仔细的区分git checkout – 文件名 15 撤销修改，回到上一次的状态git rm __后gitcommit -m “remove ***.txt” 16 从版本库里面删除git checkout -b dev 17 创建一个分支，并且切换到这个分支上git branch 18 查看当前的分支git merge dev 19 合并指定的分支git fast -forward 20 快进模式，就是master分支指向dev，速度很快git branch -d dev 21 删除指定的分支git log –graph 22 可以查看分支的合并图git stash 23 把当前的工作储存起来，以后可以恢复，可以通过新的分支来解决bug。可以继续多次的git stashgit stash pop 24 回到工作的现场git rebase 25 把本地未push的分叉提交历史，整理成为直线。方便观看 最后上面只是一些比较简单的git的命令，推荐去下面的地址学习。如果你想要更加深入了解这个方面的知识的话。 廖雪峰大神的git命令教程","link":"/2019/07/10/Git教程/"}],"tags":[{"name":"主题","slug":"主题","link":"/tags/主题/"},{"name":"git教程","slug":"git教程","link":"/tags/git教程/"}],"categories":[{"name":"css","slug":"css","link":"/categories/css/"},{"name":"git","slug":"git","link":"/categories/git/"}]}